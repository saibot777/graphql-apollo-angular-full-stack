(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common/http'), require('rxjs/Observable')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/common/http', 'rxjs/Observable'], factory) :
	(factory((global.apollo = global.apollo || {}, global.apollo.link = global.apollo.link || {}, global.apollo.link.httpCommon = {}),global.ng.common.http,global.Rx));
}(this, (function (exports,http,Observable) { 'use strict';

var __assign = (undefined && undefined.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var fetch = function (req, httpClient) {
    var shouldUseBody = ['POST', 'PUT', 'PATCH'].indexOf(req.method.toUpperCase()) !== -1;
    var shouldStringify = function (param) {
        return ['variables', 'extensions'].indexOf(param.toLowerCase()) !== -1;
    };
    // `body` for some, `params` for others
    var bodyOrParams = {};
    if (req.body.length) {
        if (!shouldUseBody) {
            return new Observable.Observable(function (observer) {
                return observer.error(new Error('Batching is not available for GET requests'));
            });
        }
        bodyOrParams = {
            body: req.body,
        };
    }
    else {
        if (shouldUseBody) {
            bodyOrParams = {
                body: req.body,
            };
        }
        else {
            var params = Object.keys(req.body).reduce(function (httpParams, param) {
                var val = req.body[param];
                if (shouldStringify(param.toLowerCase())) {
                    val = JSON.stringify(val);
                }
                return httpParams.set(param, val);
            }, new http.HttpParams());
            bodyOrParams = { params: params };
        }
    }
    // create a request
    return httpClient.request(req.method, req.url, __assign({ observe: 'response', responseType: 'json', reportProgress: false }, bodyOrParams, req.options));
};
var mergeHeaders = function (source, destination) {
    if (source && destination) {
        var merged = destination
            .keys()
            .reduce(function (headers, name) { return headers.set(name, destination.getAll(name)); }, source);
        return merged;
    }
    return destination || source;
};
function prioritize() {
    var values = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        values[_i] = arguments[_i];
    }
    var picked = values.find(function (val) { return typeof val !== 'undefined'; });
    if (typeof picked === 'undefined') {
        return values[values.length - 1];
    }
    return picked;
}

exports.fetch = fetch;
exports.mergeHeaders = mergeHeaders;
exports.prioritize = prioritize;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=bundle.umd.js.map
